{"version":3,"file":"static/js/4457.8cd2b329.chunk.js","mappings":"uOAMe,SAASA,IACtB,MAAM,YAAEC,EAAW,YAAEC,IAAgBC,EAAAA,EAAAA,OAE/B,QAAEC,IAAYC,EAAAA,EAAAA,gBAGdC,EACY,QAAhBL,QAAsCM,IAAZH,GAAyBH,IAAgBO,EAAAA,GAAwBJ,IAAUK,QACjGC,EACY,QAAhBR,QAAsCK,IAAZH,GAAyBF,IAAgBM,EAAAA,GAAwBJ,IAAUK,QAEvG,OACER,GACAC,IACCD,EAAYU,gBAAkBT,EAAYS,eAAkBL,GAAgBI,IAEtE,SAACE,EAAAA,GAAQA,CAACC,GAAI,QAAQZ,IAAea,SAAO,KAE9C,SAACC,EAAAA,QAAYA,CAAAA,EACtB,C","sources":["pages/AddLiquidity/redirects.tsx"],"sourcesContent":["import { useWeb3React } from '@web3-react/core'\nimport { Navigate, useParams } from 'react-router-dom'\n\nimport { WRAPPED_NATIVE_CURRENCY } from '../../constants/tokens'\nimport AddLiquidity from './index'\n\nexport default function RedirectDuplicateTokenIds() {\n  const { currencyIdA, currencyIdB } = useParams<{ currencyIdA: string; currencyIdB: string; feeAmount?: string }>()\n\n  const { chainId } = useWeb3React()\n\n  // prevent weth + eth\n  const isETHOrWETHA =\n    currencyIdA === 'ETH' || (chainId !== undefined && currencyIdA === WRAPPED_NATIVE_CURRENCY[chainId]?.address)\n  const isETHOrWETHB =\n    currencyIdB === 'ETH' || (chainId !== undefined && currencyIdB === WRAPPED_NATIVE_CURRENCY[chainId]?.address)\n\n  if (\n    currencyIdA &&\n    currencyIdB &&\n    (currencyIdA.toLowerCase() === currencyIdB.toLowerCase() || (isETHOrWETHA && isETHOrWETHB))\n  ) {\n    return <Navigate to={`/add/${currencyIdA}`} replace />\n  }\n  return <AddLiquidity />\n}\n"],"names":["RedirectDuplicateTokenIds","currencyIdA","currencyIdB","useParams","chainId","useWeb3React","isETHOrWETHA","undefined","WRAPPED_NATIVE_CURRENCY","address","isETHOrWETHB","toLowerCase","Navigate","to","replace","AddLiquidity"],"sourceRoot":""}