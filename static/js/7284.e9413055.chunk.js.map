{"version":3,"file":"static/js/7284.e9413055.chunk.js","mappings":"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","sources":["components/Charts/PriceChart/utils.ts","components/Charts/LineChart.tsx","components/Charts/SparklineChart.tsx","components/Icons/Info.tsx","components/Tokens/TokenTable/TokenRow.tsx","components/Tokens/state.ts"],"sourcesContent":["import { bisector, ScaleLinear, timeDay, timeHour, TimeInterval, timeMinute, timeMonth } from 'd3'\nimport { PricePoint, TimePeriod } from 'graphql/data/util'\n\n/**\n * Returns the minimum and maximum values in the given array of PricePoints.\n */\nexport function getPriceBounds(prices: PricePoint[]): { min: number; max: number } {\n  if (!prices.length) return { min: 0, max: 0 }\n\n  let min = prices[0].value\n  let max = prices[0].value\n\n  for (const pricePoint of prices) {\n    if (pricePoint.value < min) {\n      min = pricePoint.value\n    }\n    if (pricePoint.value > max) {\n      max = pricePoint.value\n    }\n  }\n\n  return { min, max }\n}\n\n/**\n * Cleans an array of PricePoints by removing zero values and marking gaps in data as blanks.\n *\n * @param prices - The original array of PricePoints\n * @returns An object containing two arrays: fixedChart and blanks\n */\nexport function cleanPricePoints(prices: PricePoint[]) {\n  const validPrices: PricePoint[] = [] // PricePoint array with 0 values removed\n  const blanks: [PricePoint, PricePoint][] = [] // PricePoint pairs that represent blank spaces in the chart\n  let lastValidPrice: PricePoint | undefined\n\n  prices.forEach((pricePoint, index) => {\n    if (pricePoint.value !== 0) {\n      const isFirstValidPrice = validPrices.length === 0\n\n      if (isFirstValidPrice && index !== 0) {\n        const blankStart = { timestamp: prices[0].timestamp, value: pricePoint.value }\n        blanks.push([blankStart, pricePoint])\n      }\n\n      lastValidPrice = pricePoint\n      validPrices.push(pricePoint)\n    }\n  })\n\n  if (lastValidPrice) {\n    const isLastPriceInvalid = lastValidPrice !== prices[prices.length - 1]\n\n    if (isLastPriceInvalid) {\n      const blankEnd = { timestamp: prices[prices.length - 1].timestamp, value: lastValidPrice.value }\n      blanks.push([lastValidPrice, blankEnd])\n    }\n  }\n\n  return { prices: validPrices, blanks, lastValidPrice }\n}\n\n/**\n * Retrieves the nearest PricePoint to a given x-coordinate based on a linear time scale.\n *\n * @param x - The x-coordinate to find the nearest PricePoint for.\n * @param prices - An array of PricePoints, assumed to be sorted by timestamp.\n * @param timeScale - A D3 ScaleLinear instance for time scaling.\n * @returns The nearest PricePoint to the given x-coordinate.\n */\nexport function getNearestPricePoint(\n  x: number,\n  prices: PricePoint[],\n  timeScale: ScaleLinear<number, number, never>\n): PricePoint | undefined {\n  // Convert the x-coordinate back to a timestamp\n  const targetTimestamp = timeScale.invert(x)\n\n  // Use bisector for O(log N) complexity, assumes prices are sorted by timestamp\n  const bisect = bisector((d: PricePoint) => d.timestamp).left\n  const index = bisect(prices, targetTimestamp, 1)\n\n  // Get potential nearest PricePoints\n  const previousPoint = prices[index - 1]\n  const nextPoint = prices[index]\n\n  // Default to the previous point if next point doesn't exist\n  if (!nextPoint) {\n    return previousPoint\n  }\n\n  // Calculate temporal distances to target timestamp\n  const distanceToPrevious = Math.abs(targetTimestamp.valueOf() - previousPoint.timestamp.valueOf())\n  const distanceToNext = Math.abs(nextPoint.timestamp.valueOf() - targetTimestamp.valueOf())\n\n  // Return the PricePoint with the smallest temporal distance to targetTimestamp\n  return distanceToPrevious < distanceToNext ? previousPoint : nextPoint\n}\n\nconst fiveMinutes = timeMinute.every(5)\nconst TIME_PERIOD_INTERVAL_TABLE: Record<TimePeriod, { interval: TimeInterval; step: number }> = {\n  [TimePeriod.HOUR]: fiveMinutes\n    ? { interval: fiveMinutes, step: 2 } // spaced 10 minutes apart at times that end in 0 or 5\n    : { interval: timeMinute, step: 10 }, // spaced 10 minutes apart, backup incase fiveMinutes doesn't initialize\n  [TimePeriod.DAY]: { interval: timeHour, step: 4 }, // spaced 4 hours apart\n  [TimePeriod.WEEK]: { interval: timeDay, step: 1 }, // spaced 1 day apart\n  [TimePeriod.MONTH]: { interval: timeDay, step: 7 }, // spaced 1 week apart\n  [TimePeriod.YEAR]: { interval: timeMonth, step: 2 }, // spaced 2 months apart\n}\n\n/**\n * Returns an array of tick values for a given time range and time period.\n * This function makes sure that the ticks are evenly spaced and are not too close to the edges.\n */\nexport function getTicks(startTime: number, endTime: number, timePeriod: TimePeriod, maxTicks: number) {\n  if (maxTicks === 0 || endTime <= startTime) return []\n\n  // Prevents ticks from being too close to the axis edge\n  const tickMargin = (endTime - startTime) / 24\n\n  const startDate = new Date((startTime + tickMargin) * 1000)\n  const endDate = new Date((endTime - tickMargin) * 1000)\n\n  const { interval, step } = TIME_PERIOD_INTERVAL_TABLE[timePeriod]\n  const ticks = interval.range(startDate, endDate, step).map((x) => x.valueOf() / 1000) // convert to seconds\n\n  if (ticks.length <= maxTicks) return ticks\n\n  const newTicks = []\n  const tickSpacing = Math.floor(ticks.length / maxTicks)\n  for (let i = 1; i < ticks.length; i += tickSpacing) {\n    newTicks.push(ticks[i])\n  }\n  return newTicks\n}\n","import { Group } from '@visx/group'\nimport { LinePath } from '@visx/shape'\nimport { CurveFactory } from 'd3'\nimport React from 'react'\nimport { ReactNode } from 'react'\nimport { useTheme } from 'styled-components'\n\nexport interface LineChartProps<T> {\n  data: T[]\n  getX: (t: T) => number\n  getY: (t: T) => number\n  marginTop?: number\n  curve: CurveFactory\n  color?: string\n  strokeWidth: number\n  children?: ReactNode\n  width: number\n  height: number\n}\n\nfunction LineChart<T>({\n  data,\n  getX,\n  getY,\n  marginTop,\n  curve,\n  color,\n  strokeWidth,\n  width,\n  height,\n  children,\n}: LineChartProps<T>) {\n  const theme = useTheme()\n  return (\n    <svg width={width} height={height}>\n      <Group top={marginTop}>\n        <LinePath\n          curve={curve}\n          stroke={color ?? theme.accent1}\n          strokeWidth={strokeWidth}\n          data={data}\n          x={getX}\n          y={getY}\n        />\n      </Group>\n      {children}\n    </svg>\n  )\n}\n\nexport default React.memo(LineChart) as typeof LineChart\n","import { SparkLineLoadingBubble } from 'components/Tokens/TokenTable/TokenRow'\nimport { curveCardinal, scaleLinear } from 'd3'\nimport { SparklineMap, TopToken } from 'graphql/data/TopTokens'\nimport { PricePoint } from 'graphql/data/util'\nimport { memo } from 'react'\nimport styled, { useTheme } from 'styled-components'\n\nimport LineChart from './LineChart'\nimport { getPriceBounds } from './PriceChart/utils'\n\nconst LoadingContainer = styled.div`\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\ninterface SparklineChartProps {\n  width: number\n  height: number\n  tokenData: TopToken\n  pricePercentChange?: number | null\n  sparklineMap: SparklineMap\n}\n\nfunction _SparklineChart({ width, height, tokenData, pricePercentChange, sparklineMap }: SparklineChartProps) {\n  const theme = useTheme()\n  // for sparkline\n  const pricePoints = tokenData?.address ? sparklineMap[tokenData.address] : null\n\n  // Don't display if there's one or less pricepoints\n  if (!pricePoints || pricePoints.length <= 1) {\n    return (\n      <LoadingContainer>\n        <SparkLineLoadingBubble />\n      </LoadingContainer>\n    )\n  }\n\n  const startingPrice = pricePoints[0]\n  const endingPrice = pricePoints[pricePoints.length - 1]\n  const widthScale = scaleLinear()\n    .domain(\n      // the range of possible input values\n      [startingPrice.timestamp, endingPrice.timestamp]\n    )\n    .range(\n      // the range of possible output values that the inputs should be transformed to (see https://www.d3indepth.com/scales/ for details)\n      [0, 110]\n    )\n\n  const { min, max } = getPriceBounds(pricePoints)\n  const rdScale = scaleLinear().domain([min, max]).range([30, 0])\n  const curveTension = 0.9\n\n  return (\n    <LineChart\n      data={pricePoints}\n      getX={(p: PricePoint) => widthScale(p.timestamp)}\n      getY={(p: PricePoint) => rdScale(p.value)}\n      curve={curveCardinal.tension(curveTension)}\n      marginTop={5}\n      color={pricePercentChange && pricePercentChange < 0 ? theme.critical : theme.success}\n      strokeWidth={1.5}\n      width={width}\n      height={height}\n    />\n  )\n}\n\nexport default memo(_SparklineChart)\n","import { ComponentProps } from 'react'\n\nexport const Info = (props: ComponentProps<'svg'>) => (\n  <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n    <path\n      d=\"M12 2C6.477 2 2 6.477 2 12C2 17.523 6.477 22 12 22C17.523 22 22 17.523 22 12C22 6.477 17.523 2 12 2ZM12.75 16.5C12.75 16.914 12.414 17.25 12 17.25C11.586 17.25 11.25 16.914 11.25 16.5V11.929C11.25 11.515 11.586 11.179 12 11.179C12.414 11.179 12.75 11.515 12.75 11.929V16.5ZM12.02 9.5C11.468 9.5 11.0149 9.052 11.0149 8.5C11.0149 7.948 11.458 7.5 12.01 7.5H12.02C12.573 7.5 13.02 7.948 13.02 8.5C13.02 9.052 12.572 9.5 12.02 9.5Z\"\n      fill=\"#9B9B9B\"\n    />\n  </svg>\n)\n","import { Trans } from '@lingui/macro'\nimport { InterfaceEventName } from '@uniswap/analytics-events'\nimport { ParentSize } from '@visx/responsive'\nimport { sendAnalyticsEvent } from 'analytics'\nimport SparklineChart from 'components/Charts/SparklineChart'\nimport { ArrowChangeDown } from 'components/Icons/ArrowChangeDown'\nimport { ArrowChangeUp } from 'components/Icons/ArrowChangeUp'\nimport { Info } from 'components/Icons/Info'\nimport QueryTokenLogo from 'components/Logo/QueryTokenLogo'\nimport { MouseoverTooltip } from 'components/Tooltip'\nimport { useInfoExplorePageEnabled } from 'featureFlags/flags/infoExplore'\nimport { SparklineMap, TopToken } from 'graphql/data/TopTokens'\nimport { getTokenDetailsURL, supportedChainIdFromGQLChain, validateUrlChainParam } from 'graphql/data/util'\nimport { useAtomValue } from 'jotai/utils'\nimport { ForwardedRef, forwardRef } from 'react'\nimport { CSSProperties, ReactNode } from 'react'\nimport { Link, useParams } from 'react-router-dom'\nimport styled, { css, useTheme } from 'styled-components'\nimport { BREAKPOINTS } from 'theme'\nimport { ClickableStyle } from 'theme/components'\nimport { NumberType, useFormatter } from 'utils/formatNumbers'\n\nimport {\n  LARGE_MEDIA_BREAKPOINT,\n  MAX_WIDTH_MEDIA_BREAKPOINT,\n  MEDIUM_MEDIA_BREAKPOINT,\n  SMALL_MEDIA_BREAKPOINT,\n} from '../constants'\nimport { LoadingBubble } from '../loading'\nimport {\n  filterStringAtom,\n  filterTimeAtom,\n  sortAscendingAtom,\n  sortMethodAtom,\n  TokenSortMethod,\n  useSetSortMethod,\n} from '../state'\nimport { DeltaArrow, DeltaText } from '../TokenDetails/Delta'\n\nconst Cell = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\nconst StyledTokenRow = styled.div<{\n  first?: boolean\n  last?: boolean\n  $loading?: boolean\n}>`\n  background-color: transparent;\n  display: grid;\n  font-size: 16px;\n  grid-template-columns: 1fr 7fr 4fr 4fr 4fr 4fr 5fr;\n  line-height: 24px;\n  max-width: ${MAX_WIDTH_MEDIA_BREAKPOINT};\n  min-width: 390px;\n  ${({ first, last }) => css`\n    height: ${first || last ? '72px' : '64px'};\n    padding-top: ${first ? '8px' : '0px'};\n    padding-bottom: ${last ? '8px' : '0px'};\n  `}\n  padding-left: 12px;\n  padding-right: 12px;\n  transition: ${({\n    theme: {\n      transition: { duration, timing },\n    },\n  }) => css`background-color ${duration.medium} ${timing.ease}`};\n  width: 100%;\n  transition-duration: ${({ theme }) => theme.transition.duration.fast};\n\n  &:hover {\n    ${({ $loading, theme }) =>\n      !$loading &&\n      css`\n        background-color: ${theme.deprecated_hoverDefault};\n      `}\n    ${({ last }) =>\n      last &&\n      css`\n        border-radius: 0px 0px 8px 8px;\n      `}\n  }\n\n  @media only screen and (max-width: ${MAX_WIDTH_MEDIA_BREAKPOINT}) {\n    grid-template-columns: 1fr 6.5fr 4.5fr 4.5fr 4.5fr 4.5fr 1.7fr;\n  }\n\n  @media only screen and (max-width: ${LARGE_MEDIA_BREAKPOINT}) {\n    grid-template-columns: 1fr 7.5fr 4.5fr 4.5fr 4.5fr 1.7fr;\n  }\n\n  @media only screen and (max-width: ${MEDIUM_MEDIA_BREAKPOINT}) {\n    grid-template-columns: 1fr 10fr 5fr 5fr 1.2fr;\n  }\n\n  @media only screen and (max-width: ${SMALL_MEDIA_BREAKPOINT}) {\n    grid-template-columns: 2fr 3fr;\n    min-width: unset;\n    border-bottom: 0.5px solid ${({ theme }) => theme.surface2};\n\n    :last-of-type {\n      border-bottom: none;\n    }\n  }\n`\n\nconst ClickableContent = styled.div<{ gap?: number }>`\n  display: flex;\n  ${({ gap }) => gap && `gap: ${gap}px`};\n  text-decoration: none;\n  color: ${({ theme }) => theme.neutral1};\n  align-items: center;\n  cursor: pointer;\n`\nconst ClickableName = styled(ClickableContent)`\n  gap: 12px;\n  max-width: 100%;\n`\nconst StyledHeaderRow = styled(StyledTokenRow)`\n  border-bottom: 1px solid;\n  border-color: ${({ theme }) => theme.surface3};\n  border-radius: 8px 8px 0px 0px;\n  color: ${({ theme }) => theme.neutral2};\n  font-size: 14px;\n  height: 48px;\n  line-height: 16px;\n  padding: 0px 12px;\n  width: 100%;\n  justify-content: center;\n\n  &:hover {\n    background-color: transparent;\n  }\n\n  @media only screen and (max-width: ${SMALL_MEDIA_BREAKPOINT}) {\n    justify-content: space-between;\n  }\n`\n\nconst ListNumberCell = styled(Cell)<{ header: boolean }>`\n  color: ${({ theme }) => theme.neutral2};\n  min-width: 32px;\n  font-size: 14px;\n\n  @media only screen and (max-width: ${SMALL_MEDIA_BREAKPOINT}) {\n    display: none;\n  }\n`\nconst DataCell = styled(Cell)<{ sortable: boolean }>`\n  justify-content: flex-end;\n  min-width: 80px;\n  user-select: ${({ sortable }) => (sortable ? 'none' : 'unset')};\n  transition: ${({\n    theme: {\n      transition: { duration, timing },\n    },\n  }) => css`background-color ${duration.medium} ${timing.ease}`};\n`\nconst TvlCell = styled(DataCell)`\n  padding-right: 8px;\n  @media only screen and (max-width: ${MEDIUM_MEDIA_BREAKPOINT}) {\n    display: none;\n  }\n`\nconst NameCell = styled(Cell)`\n  justify-content: flex-start;\n  padding: 0px 8px;\n  min-width: 240px;\n  gap: 8px;\n\n  @media only screen and (max-width: ${BREAKPOINTS.xs}px) {\n    min-width: 200px;\n  }\n`\nconst PriceCell = styled(DataCell)`\n  padding-right: 8px;\n`\nconst PercentChangeCell = styled(DataCell)`\n  padding-right: 8px;\n  @media only screen and (max-width: ${SMALL_MEDIA_BREAKPOINT}) {\n    display: none;\n  }\n`\nconst PercentChangeInfoCell = styled(Cell)`\n  display: none;\n\n  @media only screen and (max-width: ${SMALL_MEDIA_BREAKPOINT}) {\n    display: flex;\n    gap: 3px;\n    justify-content: flex-end;\n    color: ${({ theme }) => theme.neutral2};\n    font-size: 12px;\n    line-height: 16px;\n  }\n`\nconst PriceInfoCell = styled(Cell)`\n  justify-content: flex-end;\n  flex: 1;\n\n  @media only screen and (max-width: ${SMALL_MEDIA_BREAKPOINT}) {\n    flex-direction: column;\n    align-items: flex-end;\n  }\n`\n\nconst HeaderCellWrapper = styled.span<{ onClick?: () => void }>`\n  align-items: center;\n  cursor: ${({ onClick }) => (onClick ? 'pointer' : 'unset')};\n  display: flex;\n  gap: 4px;\n  justify-content: flex-end;\n  width: 100%;\n\n  &:hover {\n    ${ClickableStyle}\n  }\n`\nconst SparkLineCell = styled(Cell)`\n  padding: 0px 24px;\n  min-width: 120px;\n\n  @media only screen and (max-width: ${MAX_WIDTH_MEDIA_BREAKPOINT}) {\n    display: none;\n  }\n`\nconst SparkLine = styled(Cell)`\n  width: 124px;\n  height: 42px;\n`\nconst StyledLink = styled(Link)`\n  text-decoration: none;\n`\nconst TokenInfoCell = styled(Cell)`\n  gap: 8px;\n  line-height: 24px;\n  font-size: 16px;\n  max-width: inherit;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n\n  @media only screen and (max-width: ${SMALL_MEDIA_BREAKPOINT}) {\n    justify-content: flex-start;\n    flex-direction: column;\n    gap: 0px;\n    width: max-content;\n    font-weight: 535;\n  }\n`\nconst TokenName = styled.div`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  max-width: 100%;\n`\nconst TokenSymbol = styled(Cell)`\n  color: ${({ theme }) => theme.neutral2};\n  text-transform: uppercase;\n\n  @media only screen and (max-width: ${SMALL_MEDIA_BREAKPOINT}) {\n    font-size: 12px;\n    height: 16px;\n    justify-content: flex-start;\n    width: 100%;\n  }\n`\nconst VolumeCell = styled(DataCell)`\n  padding-right: 8px;\n  @media only screen and (max-width: ${LARGE_MEDIA_BREAKPOINT}) {\n    display: none;\n  }\n`\nconst SmallLoadingBubble = styled(LoadingBubble)`\n  width: 25%;\n`\nconst MediumLoadingBubble = styled(LoadingBubble)`\n  width: 65%;\n`\nconst LongLoadingBubble = styled(LoadingBubble)`\n  width: 90%;\n`\nconst IconLoadingBubble = styled(LoadingBubble)`\n  border-radius: 50%;\n  width: 24px;\n`\nexport const SparkLineLoadingBubble = styled(LongLoadingBubble)`\n  height: 4px;\n`\n\nconst InfoIconContainer = styled.div`\n  width: 16px;\n  margin-left: 2px;\n  display: flex;\n  align-items: center;\n  cursor: help;\n`\n\nexport const HEADER_DESCRIPTIONS: Record<TokenSortMethod, ReactNode | undefined> = {\n  [TokenSortMethod.PRICE]: undefined,\n  [TokenSortMethod.PERCENT_CHANGE]: undefined,\n  [TokenSortMethod.TOTAL_VALUE_LOCKED]: (\n    <Trans>\n      Total value locked (TVL) is the aggregate amount of the asset available across all Uniswap v3 liquidity pools.\n    </Trans>\n  ),\n  [TokenSortMethod.VOLUME]: (\n    <Trans>Volume is the amount of the asset that has been traded on Uniswap v3 during the selected time frame.</Trans>\n  ),\n}\n\n/* Get singular header cell for header row */\nfunction HeaderCell({\n  category,\n}: {\n  category: TokenSortMethod // TODO: change this to make it work for trans\n}) {\n  const theme = useTheme()\n  const sortAscending = useAtomValue(sortAscendingAtom)\n  const handleSortCategory = useSetSortMethod(category)\n  const sortMethod = useAtomValue(sortMethodAtom)\n\n  const description = HEADER_DESCRIPTIONS[category]\n\n  return (\n    <HeaderCellWrapper onClick={handleSortCategory}>\n      {sortMethod === category && (\n        <>\n          {sortAscending ? (\n            <ArrowChangeUp width={16} height={16} color={theme.neutral2} />\n          ) : (\n            <ArrowChangeDown width={16} height={16} color={theme.neutral2} />\n          )}\n        </>\n      )}\n      {category}\n      {description && (\n        <MouseoverTooltip text={description} placement=\"right\">\n          <InfoIconContainer>\n            <Info width=\"16px\" height=\"16px\" />\n          </InfoIconContainer>\n        </MouseoverTooltip>\n      )}\n    </HeaderCellWrapper>\n  )\n}\n\n/* Token Row: skeleton row component */\nfunction TokenRow({\n  header,\n  listNumber,\n  tokenInfo,\n  price,\n  percentChange,\n  tvl,\n  volume,\n  sparkLine,\n  ...rest\n}: {\n  first?: boolean\n  header: boolean\n  listNumber: ReactNode\n  $loading?: boolean\n  tvl: ReactNode\n  price: ReactNode\n  percentChange: ReactNode\n  sparkLine?: ReactNode\n  tokenInfo: ReactNode\n  volume: ReactNode\n  last?: boolean\n  style?: CSSProperties\n}) {\n  const rowCells = (\n    <>\n      <ListNumberCell header={header}>{listNumber}</ListNumberCell>\n      <NameCell data-testid=\"name-cell\">{tokenInfo}</NameCell>\n      <PriceCell data-testid=\"price-cell\" sortable={header}>\n        {price}\n      </PriceCell>\n      <PercentChangeCell data-testid=\"percent-change-cell\" sortable={header}>\n        {percentChange}\n      </PercentChangeCell>\n      <TvlCell data-testid=\"tvl-cell\" sortable={header}>\n        {tvl}\n      </TvlCell>\n      <VolumeCell data-testid=\"volume-cell\" sortable={header}>\n        {volume}\n      </VolumeCell>\n      <SparkLineCell>{sparkLine}</SparkLineCell>\n    </>\n  )\n  if (header) return <StyledHeaderRow data-testid=\"header-row\">{rowCells}</StyledHeaderRow>\n  return <StyledTokenRow {...rest}>{rowCells}</StyledTokenRow>\n}\n\n/* Header Row: top header row component for table */\nexport function HeaderRow() {\n  return (\n    <TokenRow\n      header={true}\n      listNumber=\"#\"\n      tokenInfo={<Trans>Token name</Trans>}\n      price={<HeaderCell category={TokenSortMethod.PRICE} />}\n      percentChange={<HeaderCell category={TokenSortMethod.PERCENT_CHANGE} />}\n      tvl={<HeaderCell category={TokenSortMethod.TOTAL_VALUE_LOCKED} />}\n      volume={<HeaderCell category={TokenSortMethod.VOLUME} />}\n      sparkLine={null}\n    />\n  )\n}\n\n/* Loading State: row component with loading bubbles */\nexport function LoadingRow(props: { first?: boolean; last?: boolean }) {\n  return (\n    <TokenRow\n      header={false}\n      listNumber={<SmallLoadingBubble />}\n      $loading\n      tokenInfo={\n        <>\n          <IconLoadingBubble />\n          <MediumLoadingBubble />\n        </>\n      }\n      price={<MediumLoadingBubble />}\n      percentChange={<LoadingBubble />}\n      tvl={<LoadingBubble />}\n      volume={<LoadingBubble />}\n      sparkLine={<SparkLineLoadingBubble />}\n      {...props}\n    />\n  )\n}\n\ninterface LoadedRowProps {\n  tokenListIndex: number\n  tokenListLength: number\n  token: NonNullable<TopToken>\n  sparklineMap: SparklineMap\n  sortRank: number\n}\n\n/* Loaded State: row component with token information */\nexport const LoadedRow = forwardRef((props: LoadedRowProps, ref: ForwardedRef<HTMLDivElement>) => {\n  const { formatFiatPrice, formatNumber, formatDelta } = useFormatter()\n\n  const { tokenListIndex, tokenListLength, token, sortRank } = props\n  const filterString = useAtomValue(filterStringAtom)\n\n  const filterNetwork = validateUrlChainParam(useParams<{ chainName?: string }>().chainName?.toUpperCase())\n  const chainId = supportedChainIdFromGQLChain(filterNetwork)\n  const timePeriod = useAtomValue(filterTimeAtom)\n  const delta = token.market?.pricePercentChange?.value\n  const formattedDelta = formatDelta(delta)\n\n  const exploreTokenSelectedEventProperties = {\n    chain_id: chainId,\n    token_address: token.address,\n    token_symbol: token.symbol,\n    token_list_index: tokenListIndex,\n    token_list_rank: sortRank,\n    token_list_length: tokenListLength,\n    time_frame: timePeriod,\n    search_token_address_input: filterString,\n  }\n\n  // A simple 0 price indicates the price is not currently available from the api\n  const price = token.market?.price?.value === 0 ? '-' : formatFiatPrice({ price: token.market?.price?.value })\n\n  const isInfoExplorePageEnabled = useInfoExplorePageEnabled()\n\n  // TODO: currency logo sizing mobile (32px) vs. desktop (24px)\n  return (\n    <div ref={ref} data-testid={`token-table-row-${token.address}`}>\n      <StyledLink\n        to={getTokenDetailsURL({ ...token, isInfoExplorePageEnabled })}\n        onClick={() =>\n          sendAnalyticsEvent(InterfaceEventName.EXPLORE_TOKEN_ROW_CLICKED, exploreTokenSelectedEventProperties)\n        }\n      >\n        <TokenRow\n          header={false}\n          listNumber={sortRank}\n          tokenInfo={\n            <ClickableName>\n              <QueryTokenLogo token={token} size=\"32px\" />\n              <TokenInfoCell>\n                <TokenName data-cy=\"token-name\">{token.name}</TokenName>\n                <TokenSymbol>{token.symbol}</TokenSymbol>\n              </TokenInfoCell>\n            </ClickableName>\n          }\n          price={\n            <ClickableContent>\n              <PriceInfoCell>\n                {price}\n                <PercentChangeInfoCell>\n                  <DeltaArrow delta={delta} size={14} />\n                  <DeltaText delta={delta}>{formattedDelta}</DeltaText>\n                </PercentChangeInfoCell>\n              </PriceInfoCell>\n            </ClickableContent>\n          }\n          percentChange={\n            <ClickableContent gap={3}>\n              <DeltaArrow delta={delta} />\n              <DeltaText delta={delta}>{formattedDelta}</DeltaText>\n            </ClickableContent>\n          }\n          tvl={\n            <ClickableContent>\n              {formatNumber({\n                input: token.market?.totalValueLocked?.value,\n                type: NumberType.FiatTokenStats,\n              })}\n            </ClickableContent>\n          }\n          volume={\n            <ClickableContent>\n              {formatNumber({\n                input: token.market?.volume?.value,\n                type: NumberType.FiatTokenStats,\n              })}\n            </ClickableContent>\n          }\n          sparkLine={\n            <SparkLine>\n              <ParentSize>\n                {({ width, height }) =>\n                  props.sparklineMap && (\n                    <SparklineChart\n                      width={width}\n                      height={height}\n                      tokenData={token}\n                      pricePercentChange={token.market?.pricePercentChange?.value}\n                      sparklineMap={props.sparklineMap}\n                    />\n                  )\n                }\n              </ParentSize>\n            </SparkLine>\n          }\n          first={tokenListIndex === 0}\n          last={tokenListIndex === tokenListLength - 1}\n        />\n      </StyledLink>\n    </div>\n  )\n})\n\nLoadedRow.displayName = 'LoadedRow'\n","import { TimePeriod } from 'graphql/data/util'\nimport { atom, useAtom } from 'jotai'\nimport { atomWithReset } from 'jotai/utils'\nimport { useCallback } from 'react'\n\nexport enum TokenSortMethod {\n  PRICE = 'Price',\n  PERCENT_CHANGE = 'Change',\n  TOTAL_VALUE_LOCKED = 'TVL',\n  VOLUME = 'Volume',\n}\n\nexport const filterStringAtom = atomWithReset<string>('')\nexport const filterTimeAtom = atom<TimePeriod>(TimePeriod.DAY)\nexport const sortMethodAtom = atom<TokenSortMethod>(TokenSortMethod.VOLUME)\nexport const sortAscendingAtom = atom<boolean>(false)\n\n/* keep track of sort category for token table */\nexport function useSetSortMethod(newSortMethod: TokenSortMethod) {\n  const [sortMethod, setSortMethod] = useAtom(sortMethodAtom)\n  const [sortAscending, setSortAscending] = useAtom(sortAscendingAtom)\n\n  return useCallback(() => {\n    if (sortMethod === newSortMethod) {\n      setSortAscending(!sortAscending)\n    } else {\n      setSortMethod(newSortMethod)\n      setSortAscending(false)\n    }\n  }, [sortMethod, setSortMethod, setSortAscending, sortAscending, newSortMethod])\n}\n"],"names":["getPriceBounds","prices","length","min","max","value","pricePoint","cleanPricePoints","validPrices","blanks","lastValidPrice","forEach","index","blankStart","timestamp","push","blankEnd","getNearestPricePoint","x","timeScale","targetTimestamp","invert","bisect","bisector","d","left","previousPoint","nextPoint","Math","abs","valueOf","fiveMinutes","timeMinute","every","TIME_PERIOD_INTERVAL_TABLE","TimePeriod","HOUR","interval","step","DAY","timeHour","WEEK","timeDay","MONTH","YEAR","timeMonth","getTicks","startTime","endTime","timePeriod","maxTicks","tickMargin","startDate","Date","endDate","ticks","range","map","newTicks","tickSpacing","floor","i","LineChart","data","getX","getY","marginTop","curve","color","strokeWidth","width","height","children","theme","useTheme","svg","Group","top","LinePath","stroke","accent1","y","React","LoadingContainer","styled","div","_SparklineChart","tokenData","pricePercentChange","sparklineMap","pricePoints","address","SparkLineLoadingBubble","startingPrice","endingPrice","widthScale","scaleLinear","domain","rdScale","p","curveCardinal","tension","critical","success","memo","Info","props","viewBox","fill","xmlns","path","Cell","StyledTokenRow","MAX_WIDTH_MEDIA_BREAKPOINT","first","last","css","transition","duration","timing","medium","ease","fast","$loading","deprecated_hoverDefault","LARGE_MEDIA_BREAKPOINT","MEDIUM_MEDIA_BREAKPOINT","SMALL_MEDIA_BREAKPOINT","surface2","ClickableContent","gap","neutral1","ClickableName","StyledHeaderRow","surface3","neutral2","ListNumberCell","DataCell","sortable","TvlCell","NameCell","BREAKPOINTS","xs","PriceCell","PercentChangeCell","PercentChangeInfoCell","PriceInfoCell","HeaderCellWrapper","span","onClick","ClickableStyle","SparkLineCell","SparkLine","StyledLink","Link","TokenInfoCell","TokenName","TokenSymbol","VolumeCell","SmallLoadingBubble","LoadingBubble","MediumLoadingBubble","LongLoadingBubble","IconLoadingBubble","InfoIconContainer","HEADER_DESCRIPTIONS","TokenSortMethod","PRICE","undefined","PERCENT_CHANGE","TOTAL_VALUE_LOCKED","VOLUME","HeaderCell","category","sortAscending","useAtomValue","sortAscendingAtom","handleSortCategory","useSetSortMethod","sortMethod","sortMethodAtom","description","ArrowChangeUp","ArrowChangeDown","MouseoverTooltip","text","placement","TokenRow","header","listNumber","tokenInfo","price","percentChange","tvl","volume","sparkLine","rest","rowCells","data-testid","HeaderRow","LoadingRow","LoadedRow","forwardRef","ref","formatFiatPrice","formatNumber","formatDelta","useFormatter","tokenListIndex","tokenListLength","token","sortRank","filterString","filterStringAtom","filterNetwork","validateUrlChainParam","useParams","chainName","toUpperCase","chainId","supportedChainIdFromGQLChain","filterTimeAtom","delta","market","formattedDelta","exploreTokenSelectedEventProperties","chain_id","token_address","token_symbol","symbol","token_list_index","token_list_rank","token_list_length","time_frame","search_token_address_input","isInfoExplorePageEnabled","useInfoExplorePageEnabled","to","getTokenDetailsURL","sendAnalyticsEvent","InterfaceEventName","EXPLORE_TOKEN_ROW_CLICKED","QueryTokenLogo","size","data-cy","name","DeltaArrow","DeltaText","input","totalValueLocked","type","NumberType","FiatTokenStats","ParentSize","SparklineChart","displayName","atomWithReset","atom","newSortMethod","setSortMethod","useAtom","setSortAscending","useCallback"],"sourceRoot":""}